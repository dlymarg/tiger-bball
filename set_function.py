from events12 import *
# this file is used for cluster analysis
# file creates clusters that lie between each existing cluster in the graph generated by the Mapper algorithm

def common_indices(cluster1, cluster2):
	'''
	returns a list of statistics with common values between two clusters
	'''
	a = set(cluster1).intersection(set(cluster2))
	return list(a)

def index_mult(index, cluster):
	'''
	returns the number of times a statistic with the same value appears within a cluster
	'''
	count = 0
	a = list(cluster)
	for i in range(len(a)):
		if index == a[i]:
			count += 1
	return count

def stat_to_index(statistic):
	'''
	attributes an index to a Four Factors statistic based on its location within the NumPy array
	'''
	index = 0
	if statistic == 'FG%':
		index = 1
	elif statistic == 'TO/POSS':
		index = 2
	elif statistic == 'OREB%':
		index = 3
	# check to see if this is on a per-possession basis
	elif statistic == 'FT_RATE':
		index = 4
	elif statistic == 'FT%':
		index = 5
	return index

def int_cluster(cluster1, cluster2):
	'''
	creates intermediate cluster (i.e., the cluster that is generated between the two existing clusters in the graph)
	'''
	b = common_indices(cluster1, cluster2)
	c = []
	for i in range(len(b)):
		c.append(min(index_mult(b[i], cluster1), index_mult(b[i], cluster2)))
	output = []
	for i in range(len(b)):
		output += [b[i]]*c[i]
	return output

def new_cluster_list(clusters):
	'''
	creates new list of clusters that includes preexisting clusters and newly-created intermediate clusters
	'''
	new_list = []
	new_list.append(clusters[0])
	for i in range(len(clusters) - 1):
		new_list.append(int_cluster(clusters[i], clusters[i + 1]))
		new_list.append(clusters[i + 1])
	return new_list

def avg_cluster(stat, data):
	'''
	computes average statistic for each cluster
	'''
	stat_index = stat_to_index(stat)
	tot_stat = 0
	for i in range(len(data)):
		tot_stat += data[i][stat_index]
	avg_stat = tot_stat/len(data)
	return avg_stat